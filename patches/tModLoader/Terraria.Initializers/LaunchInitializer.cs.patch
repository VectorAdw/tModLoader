--- src/Terraria\Terraria.Initializers\LaunchInitializer.cs
+++ src/tModLoader\Terraria.Initializers\LaunchInitializer.cs
@@ -1,6 +_,9 @@
 using System;
 using System.Diagnostics;
+using System.Linq;
+using System.Text.RegularExpressions;
 using Terraria.Localization;
+using Terraria.ModLoader.Core;
 using Terraria.Social;
 
 namespace Terraria.Initializers
@@ -37,6 +_,14 @@
 			{
 				Netplay.ListenPort = listenPort;
 			}
+			string modPack;
+			if ((modPack = LaunchInitializer.TryParameter(new string[]
+				{
+					"-modpack"
+				})) != null)
+			{
+				ModOrganizer.commandLineModPack = modPack;
+			}
 		}
 
 		private static void LoadClientParameters(Main game)
@@ -66,6 +_,36 @@
 				}))
 			{
 				game.AutoHost();
+			}
+
+			if (LaunchInitializer.HasParameter("-skipselect"))
+			{
+				string skipSelectArgs = LaunchInitializer.TryParameter(new string[] { "-skipselect" });
+
+				string playerName = null;
+				string worldName = null;
+
+				if (skipSelectArgs != null)
+				{
+					Regex cmdRegEx = new Regex(@"(?<name>.*?):(?<val>.*)");
+					Match m = cmdRegEx.Match(skipSelectArgs);
+					if (m.Success)
+					{
+						playerName = m.Groups["name"].Value;
+						worldName = m.Groups["val"].Value;
+					}
+				}
+
+				Main.showSplash = false;
+				ModLoader.ModLoader.OnSuccessfulLoad += () =>
+				{
+					WorldGen.clearWorld();
+					Main.LoadPlayers();
+					(Main.PlayerList.FirstOrDefault(x => x.Name == playerName) ?? Main.PlayerList[0]).SetAsActive();
+					Main.LoadWorlds();
+					(Main.WorldList.FirstOrDefault(x => x.Name == worldName) ?? Main.WorldList[0]).SetAsActive();
+					WorldGen.playWorld();
+				};
 			}
 		}
 
@@ -156,6 +_,23 @@
 			{
 				LanguageManager.Instance.SetLanguage(text);
 			}
+
+			// We handle the build parameter this far in
+			// so vanilla can take care of loading the appropriate localization keys beforehand
+			if ((text = LaunchInitializer.TryParameter(new string[]
+				{
+					"-build"
+				})) != null)
+			{
+				// Inside the build from command line, the application exits
+				// Anything beyond this point will not be executed
+				ModCompile.BuildModCommandLine(text);
+			}
+
+			if ((text = TryParameter("-install")) != null) {
+				FileAssociationSupport.HandleFileAssociation(text);
+			}
+
 			string worldName;
 			if ((worldName = LaunchInitializer.TryParameter(new string[]
 				{
@@ -171,6 +_,14 @@
 				})) != null)
 			{
 				game.NewMOTD(newMOTD);
+			}
+			string modPath;
+			if ((modPath = LaunchInitializer.TryParameter(new string[]
+				{
+					"-modpath"
+				})) != null)
+			{
+				ModOrganizer.modPath = modPath;
 			}
 			string banFilePath;
 			if ((banFilePath = LaunchInitializer.TryParameter(new string[]

