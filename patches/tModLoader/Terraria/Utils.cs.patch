--- src/Terraria\Terraria\Utils.cs
+++ src/tModLoader\Terraria\Utils.cs
@@ -467,9 +_,72 @@
 			return array;
 		}
 
+		public static T NextEnum<T>(this T src) where T : struct
+		{
+			if (!typeof(T).IsEnum) throw new ArgumentException(String.Format("Argumnent {0} is not an Enum", typeof(T).FullName));
+
+			T[] Arr = (T[])Enum.GetValues(src.GetType());
+			int j = Array.IndexOf<T>(Arr, src) + 1;
+			return (Arr.Length == j) ? Arr[0] : Arr[j];
+		}
+
+		public static T PreviousEnum<T>(this T src) where T : struct
+		{
+			if (!typeof(T).IsEnum) throw new ArgumentException(String.Format("Argumnent {0} is not an Enum", typeof(T).FullName));
+
+			T[] Arr = (T[])Enum.GetValues(src.GetType());
+			int j = Array.IndexOf<T>(Arr, src) - 1;
+			return (j < 0) ? Arr[Arr.Length - 1] : Arr[j];
+		}
+
+		public static T Next<T>(this UnifiedRandom r, T[] array)
+		{
+			return array[r.Next(array.Length)];
+		}
+
+		public static T Next<T>(this UnifiedRandom r, IList<T> list)
+		{
+			return list[r.Next(list.Count)];
+		}
+
+		public static bool NextBool(this UnifiedRandom r)
+		{
+			return r.NextDouble() < .5;
+		}
+
+		// Returns true 1 out of X times.
+		public static bool NextBool(this UnifiedRandom r, int consequent)
+		{
+			if (consequent < 1)
+			{
+				throw new ArgumentOutOfRangeException("consequent", "consequent must be greater than or equal to 1.");
+			}
+			return r.Next(consequent) == 0;
+		}
+
+		// Returns true X out of Y times.
+		public static bool NextBool(this UnifiedRandom r, int antecedent, int consequent)
+		{
+			if (antecedent > consequent)
+			{
+				throw new ArgumentOutOfRangeException("antecedent", "antecedent must be less than or equal to consequent.");
+			}
+			return r.Next(consequent) < antecedent;
+		}
+
 		public static float NextFloat(this UnifiedRandom r)
 		{
 			return (float)r.NextDouble();
+		}
+
+		public static float NextFloat(this UnifiedRandom r, float maxValue)
+		{
+			return (float)r.NextDouble() * maxValue;
+		}
+
+		public static float NextFloat(this UnifiedRandom r, float minValue, float maxValue)
+		{
+			return (float)r.NextDouble() * (maxValue - minValue) + minValue;
 		}
 
 		public static float NextFloatDirection(this UnifiedRandom r)
@@ -695,6 +_,49 @@
 		{
 			return new Vector2((float)p.X, (float)p.Y);
 		}
+
+		// Added these as it may prove useful to some modders, it does clutter this file a bit so I put them all in a region which is collapsible
+		#region tML Helpers
+		public static Vector2 ToWorldCoordinates(this Point p, Vector2 autoAddXY)
+		{
+			return ToWorldCoordinates(p, autoAddXY.X, autoAddXY.Y);
+		}
+
+		public static Vector2 ToWorldCoordinates(this Point16 p, Vector2 autoAddXY)
+		{
+			return ToWorldCoordinates(p.ToVector2(), autoAddXY);
+		}
+
+		public static Vector2 ToWorldCoordinates(this Point16 p, float autoAddX = 8f, float autoAddY = 8f)
+		{
+			return ToWorldCoordinates(p.ToVector2(), new Vector2(autoAddX, autoAddY));
+		}
+
+		public static Vector2 ToWorldCoordinates(this Vector2 v, float autoAddX = 8f, float autoAddY = 8f)
+		{
+			return ToWorldCoordinates(v, new Vector2(autoAddX, autoAddY));
+		}
+
+		public static Vector2 ToWorldCoordinates(this Vector2 v, Vector2 autoAddXY)
+		{
+			return v * 16f + autoAddXY;
+		}
+
+		public static Point ToPoint(this Point16 p)
+		{
+			return new Point((int)p.X, (int)p.Y);
+		}
+
+		public static Point16 ToPoint16(this Vector2 v)
+		{
+			return new Point16((short)v.X, (short)v.Y);
+		}
+
+		public static Vector2 ToVector2(this Point16 p)
+		{
+			return new Vector2((float)p.X, (float)p.Y);
+		}
+		#endregion
 
 		public static Vector2 ToWorldCoordinates(this Point p, float autoAddX = 8f, float autoAddY = 8f)
 		{
@@ -1131,6 +_,7 @@
 				text.Substring(0, maxCharactersDisplayed);
 			}
 			DynamicSpriteFont fontDeathText = Main.fontDeathText;
+			/*
 			for (int i = -1; i < 2; i++)
 			{
 				for (int j = -1; j < 2; j++)
@@ -1139,7 +_,10 @@
 				}
 			}
 			spriteBatch.DrawString(fontDeathText, text, pos, color, 0f, new Vector2(anchorx, anchory) * fontDeathText.MeasureString(text), scale, SpriteEffects.None, 0f);
-			return fontDeathText.MeasureString(text) * scale;
+			*/
+			Vector2 vector = ChatManager.GetStringSize(fontDeathText, text, Vector2.One);
+			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontDeathText, text, pos, color, 0f, new Vector2(anchorx, anchory) * vector, new Vector2(scale), -1f, 2f);
+			return vector * scale;
 		}
 
 		public static void DrawInvBG(SpriteBatch sb, Rectangle R, Color c = default(Color))

